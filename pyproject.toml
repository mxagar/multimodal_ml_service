[tool.poetry]
name = "mulimodal-ml-service"
version = "0.0.1"
description = "Blueprint for building a Machine Learning Service which features multiple models and modalities."
authors = ["Mikel Sagardia <sagardia.mikel@gmail.com>"]
readme = "README.md"
packages = [{ include = "src", from = "." }]


[build-system]
requires = ["pip-tools"]
build-backend = "setuptools.build_meta"


[tool.ruff]
line-length = 120
exclude = ["./notebooks/*"]


[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",         # Asserts allowed
    "ARG",          # Unused function args
    "FBT",          # Booleans as positional arguments
    "PLR2004",      # Magic value used in comparison
    "SLF001",       # Access private member
    "ERA001"        # Commented-out code
]
"noxfile.py" = [
    "ERA001"        # Commented-out code
]
"tests/conftest.py" = [
    "D103",         # Missing docstring in public function
    "D102"          # Missing docstring in class method"
]



[tool.ruff.format]
quote-style = "double"
docstring-code-format = true


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint]
select = [
    'E',      # pycodestyle errors
    'W',      # pycodestyle warnings
    'F',      # Pyflakes
    'D',      # pydocstyle
    'B',      # flake8-bugbear
    'A',      # flake8-builtins
    'COM',    # flake8-commas
    'C4',     # flake8-comprehensions
    'EM',     # flake8-errmsg
    'ISC',    # flake8-implicit-str-concat
    'INP001', # flake8-no-pep420
    'PIE',    # flake8-pie
    'T20',    # flake8-print
    'PYI',    # flake8-pyi
    'Q',      # flake8-quotes
    'RSE',    # flake8-raise
    'SLF',    # flake8-self
    'PTH',    # flake8-use-pathlib
    'SIM',    # flake8-simplify
    'S101',   # Use of assert detected
    'S102',   # Use of exec detected
    'S110',   #	try-except-pass detected, consider logging the exception
    'S112',   # try-except-continue detected, consider logging the exception
    'ERA',    # eradicate
    'PL',     # Pylint
    'PERF',   # Perflint
    'RUF',    # Require linting rules specific to ruff: RUF100 (type hints), etc.
]
ignore = [
    'D100',    # Missing docstring in public module
    'D104',    # Missing docstring in public package
    'D415',    # First line should end with a period
    'D416',    # Section name ends in colon
    "D107",    # Ignore missing docstrings in __init__
    'SIM108',  # Check for if-else-blocks that can be replaced with a ternary operator.
    'PTH123',  # open() should be replaced by Path.open()
    'PLR091',  # Too many x
    'PLR1714', # Consider merging multiple comparisons
    'PERF401', # Use a list comprehension to create a transformed list
    'PERF203', # Checks for uses of except handling via try-except within for and while loops.
    'RUF005',  # Consider `[*arr, 'new_item']` instead of concatenation
    'COM812',  # flake8-commas, trailing commas  
    'ISC001',  # flake8-implicit-str-concat
    'D203',    # pydocstyle: blank line is required before a class docstring
    'D213',    # pydocstyle: multi-line docstrings incorrectly aligned
    'EM101',   # Exception must not use a string literal
    'EM102'    # Exception must not use an f-string literal
]
task-tags = ["TODO", "FIXME"]
